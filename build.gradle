plugins {
  id 'java-library'
  // To create a shadow/fat jar, including dependencies
  id 'com.github.johnrengelman.shadow' version '7.0.0'
  // To manage included native libraries
  id 'org.bytedeco.gradle-javacpp-platform' version '1.5.4'
}

repositories {
  // Use this only for local development!
  // mavenLocal()

  mavenCentral()

  maven {
    url "https://maven.scijava.org/content/repositories/releases"
  }

  maven {
    url "https://maven.scijava.org/content/repositories/snapshots"
  }

  // maven {
  //   url "https://openvino.jfrog.io/artifactory/openvino-gradle-dev-local"
  // }
}

ext.moduleName = 'qupath.extension.openvino'

description = 'QuPath extension to use Intel OpenVINO'

version = "0.3.0"

import org.gradle.internal.os.OperatingSystem
println 'Operating system: ' + OperatingSystem.current()

def nativesCPP;
dependencies {
    def openvinoVersion = "2021.4"
    def qupathVersion = "0.3.0"

    if (OperatingSystem.current().isMacOsX()) {
      nativesCPP = 'macosx-x86_64'
    } else if (OperatingSystem.current().isLinux()) {
      nativesCPP = 'linux-x86_64'
    } else if (OperatingSystem.current().isWindows()) {
      nativesCPP = 'windows-x86_64'
    } else {
      logger.warn('Unknown operating system!')
    }

    // implementation "org.intel:openvino:${openvinoVersion}-${nativesCPP}"
    implementation files("/home/dkurt/openvino_contrib/modules/java_api/build/libs/openvino-2022.1-linux-x86_64.jar")

    shadow "io.github.qupath:qupath-gui-fx:${qupathVersion}"
    shadow "org.slf4j:slf4j-api:1.7.30"

    testImplementation "io.github.qupath:qupath-gui-fx:${qupathVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.2"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

}

shadowJar {
  classifier = "${nativesCPP}"
}

processResources {
  from ("${projectDir}/LICENSE.txt") {
    into 'licenses/'
  }
}

tasks.register("copyDependencies", Copy) {
    description "Copy dependencies into the build directory for use elsewhere"
    group "QuPath"

    from configurations.default
    into 'build/libs'
}

/*
 * Ensure Java 11 compatibility
 */
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    if (project.properties['sources'])
	    withSourcesJar()
    if (project.properties['javadocs'])
	    withJavadocJar()

}

/*
 * Create javadocs for all modules/packages in one place.
 * Use -PstrictJavadoc=true to fail on error with doclint (which is rather strict).
 */
def strictJavadoc = findProperty('strictJavadoc')
if (!strictJavadoc) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

/*
 * Avoid 'Entry .gitkeep is a duplicate but no duplicate handling strategy has been set.'
 * when using withSourcesJar()
 */
tasks.withType(org.gradle.jvm.tasks.Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.named('test') {
    useJUnitPlatform()
}
